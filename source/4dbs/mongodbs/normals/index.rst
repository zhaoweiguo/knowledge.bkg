索引
####

索引类型
========

（一）、单键索引::

    在一个键上创建的索引就是单键索引，单键索引是最常见的索引，如MongoDB默认创建的_id的索引就是单键索引。

（二）、复合索引::

    在多个键上建立的索引就是复合索引

（三）、多建索引::

    如果在一个值为数组的字段上面创建索引， MongoDB会自己决定，是否要把这个索引建成多键索引

（四）、地理空间索引::

    MongoDB支持几种类型的地理空间索引。
    其中最常用的是 2dsphere 索引（用于地球表面类型的地图）和 2d 索引（用于平面地图和时间连续的数据）

（五）、全文索引::

    全文索引用于在文档中搜索文本，我们也可以使用正则表达式来查询字符串
    但是当文本块比较大的时候，正则表达式搜索会非常慢，而且无法处理语言理解的问题（如 entry 和 entries 应该算是匹配的）。
    使用全文索引可以非常快地进行文本搜索，就如同内置了多种语言分词机制的支持一样。
    创建索引的开销都比较大，全文索引的开销更大。创建索引时，需后台或离线创建

（六）、哈希索引::

    哈希索引可以支持相等查询，但是 哈希 索引不支持范围查询。
    您可能无法创建一个带有 哈希 索引键的复合索引或者对 哈希 索引施加唯一性的限制。
    但是，您可以在同一个键上同时创建一个 哈希 索引和一个递增/递减(例如，非哈希)的索引，
    这样MongoDB对于范围查询就会自动使用非哈希的索引

索引属性
========

一)唯一索引::

    唯一索引可以拒绝保存那些被索引键的值已经重复的文档。
    默认情况下，MongoDB索引的 unique 属性是 false 。如果对复合索引施加唯一性的限制，那么MongoDB就会强制要求 复合 值的唯一性，而不是分别对每个单独的值要求唯一。
    唯一性的限制是针对一个集合中不同文档的。也即，唯一索引可以防止 不同 文档的被索引键上存储相同值，但是它不禁止同一篇文档在被索引键存储的数组里存储的元素或者内嵌文档是相同的值。
    在同一篇文档存储重复数据的情况下，重复的值只会被存入索引一次。
    如果一篇文档不包含唯一索引的被索引键，那么索引默认会为该文档存储一个null值。由于唯一性的限制，MongoDB将只允许有一篇可以不包含被索引键。如果超过一篇文档不包含被索引键或没有值，那么会抛出键重复(duplicate key)错误导致索引创建失败。可以组合使用唯一性和稀疏索引的特性来过滤那些包含null值的文档以避免这个错误。

二)稀疏索引(Sparse Indexes)::

    稀疏索引会跳过所有不包含被索引键的文档。这个索引之所以称为 “稀疏” 是因为它并不包括集合中的所有文档。与之相反，非稀疏的索引会索引每一篇文档，如果一篇文档不含被索引键则为它存储一个null值。
    如果一个索引会导致查询或者排序的结果集是不完整的，那么MongoDB将不会使用这个索引，除非用户使用 hint() 方法来显示指定索引。例如，查询 { x: { $exists: false } } 将不会使用 x 键上的稀疏索引，除非显示的hint。
    2dsphere (version 2), 2d 和 text 这些索引总是稀疏的。
    只要一个文档里有至少一个被索引键，稀疏且只包含有递增/递减索引键的复合索引就会索引这篇文档。
    至于稀疏且包含有地理索引键(例如 2dsphere, 2d)以及递增/递减索引键的复合索引，只有地理索引键的存在与否能决定一篇文档是否被索引。
    至于稀疏且包含了全文索引键和其他递增/递减索引键的复合索引，只有全文索引键的存在与否能决定是否索引该文档。
    一个稀疏且唯一的索引，可以防止集合中的文档被索引键中出现重复值，同时也允许多个文档里不包含被索引键

三)局部索引(Partial Indexes)::

    这是3.2.0版本以后新增的
    只会对Collections满足条件partialFilterExpression的文档进行索引
    使用该索引，会在一定程度上减少存储空间和创建索引和维护性能降低的成本

    //创建部分索引
    db.restaurants.createIndex(
       { cuisine: 1, name: 1 },
       { partialFilterExpression: { rating: { $gt: 5 } } }
    )
    //查询情况分类
    db.restaurants.find( { cuisine: "Italian", rating: { $gte: 8 } } )   //(1)
    db.restaurants.find( { cuisine: "Italian", rating: { $lt: 8 } } )    //(2)
    db.restaurants.find( { cuisine: "Italian" } )                        //(3)



.. note:: 备注：3.2.0 版本后推荐使用Partial Indexes


四)TTL索引::

    TTL索引是特殊的单字段索引
    并且字段类型必须是date类型或者包含有date类型的数组
    MongoDB可以使用它在一定时间后或在特定时钟时间自动从集合中删除文档
    
    TTL 集合支持失效时间设置，当超过指定时间后，集合自动清除超时的文档
    这用来保存一些诸如session会话信息的时候非常有用，或者存储缓存数据使用
    但删除会有延时
    你不能创建 TTL 索引，如果要索引的字段已经在其他索引中使用。否则超时后文档不会被自动清除。
    索引不能包含多个字段

索引属性选项配置
================

一)options全局选项（适用于所有索引）::

    1. background  Boolean 
       建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 “background” 可选参数。 
       “background” 默认值为false。
    2. unique  Boolean 
       建立的索引是否唯一。指定为true创建唯一索引。
       默认值为false.
    3. name  string  索引的名称
       如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。
       不能超过128字符
    4. partialFilterExpression Document  
       设定索引只对满足条件的文档起作用 具体见官网对Partial Indexes
    5. sparse  Boolean 
       对文档中不存在的字段数据不启用索引；
       这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.
       默认值为 false.
    6. expireAfterSeconds  integer 
       指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。
    7. storageEngine Document  
       允许用户在创建索引时指定每一个索引的配置

二)全文（文本）索引选项::

    参数名 类型  描述
    weights document  设置文本索引字段的权重，权重值1- 99,999
    default_language  设置文本分词的语言，默认为english，其他支持语言 
    language_override string  使用文档中的一个字段的值作为设置文本分词的语言，默认为language,例子
    textIndexVersion  integer 版本号,可以是1或2

基本
====

创建索引，需要考虑的问题::

    每个索引至少需要数据空间为8kb；
    添加索引会对写入操作会产生一些性能影响。 对于具有高写入率的集合Collections，索引很昂贵，因为每个插入也必须更新任何索引；
    索引对于具有高读取率的集合Collections很有利，不会影响没索引查询；
    处于索引处于action状态时，每个索引都会占用磁盘空间和内存，因此需要对这种情况进行跟踪检测。

索引限制::

    索引名称长度不能超过128字段；
    复合索引不能超过32个属性；
    每个集合Collection不能超过64个索引；
    不同类型索引还具有各自的限制条件。

MongoDB度量标准::

    metrics.queryExecutor.scanned
    在查询和查询计划评估期间扫描的索引项的总数

    metrics.operation.scanAndOrder
    返回无法使用索引执行排序操作的已排序数字的查询总数

    collStats.totalIndexSize
    所有索引的总大小。 scale参数会影响此值。
    如果索引使用前缀压缩（这是WiredTiger的默认值），则返回的大小将反映计算总计时任何此类索引的压缩大小。

    collStats.indexSizes
    指定集合collection上每个现有索引的键和大小。 scale参数会影响此值

    dbStats.indexes
    包含数据库中所有集合的索引总数的计数。

    dbStats.indexSize
    在此数据库上创建的所有索引的总大小




参考
====

* https://blog.csdn.net/LOUISLIAOXH/article/details/51543552
* https://juejin.im/post/5d41924f5188255d5102e1fd



